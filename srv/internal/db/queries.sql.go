// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const associateUserWithGang = `-- name: AssociateUserWithGang :exec
INSERT INTO users_gangs (
    user_id, gang_id, isHost, associated_at
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP
)
`

type AssociateUserWithGangParams struct {
	UserID int32
	GangID int32
	Ishost bool
}

func (q *Queries) AssociateUserWithGang(ctx context.Context, arg AssociateUserWithGangParams) error {
	_, err := q.db.Exec(ctx, associateUserWithGang, arg.UserID, arg.GangID, arg.Ishost)
	return err
}

const createGang = `-- name: CreateGang :one
INSERT INTO gangs (
    name, entry_password_hash
) VALUES (
    $1, $2
)
RETURNING id, name, entry_password_hash, created_at
`

type CreateGangParams struct {
	Name              string
	EntryPasswordHash string
}

func (q *Queries) CreateGang(ctx context.Context, arg CreateGangParams) (Gang, error) {
	row := q.db.QueryRow(ctx, createGang, arg.Name, arg.EntryPasswordHash)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, avatar_path
) VALUES (
    $1, $2
)
RETURNING id, name, avatar_path, created_at, last_login
`

type CreateUserParams struct {
	Name       string
	AvatarPath pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.AvatarPath)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarPath,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const createVideoGuess = `-- name: CreateVideoGuess :one
INSERT INTO video_guesses (
    user_id, gang_id, video_id, guessed_user_id
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (user_id, gang_id, video_id) 
DO UPDATE SET guessed_user_id = $4, guessed_at = CURRENT_TIMESTAMP
RETURNING id, user_id, gang_id, video_id, guessed_user_id, guessed_at
`

type CreateVideoGuessParams struct {
	UserID        int32
	GangID        int32
	VideoID       string
	GuessedUserID int32
}

// Video guess related queries
func (q *Queries) CreateVideoGuess(ctx context.Context, arg CreateVideoGuessParams) (VideoGuess, error) {
	row := q.db.QueryRow(ctx, createVideoGuess,
		arg.UserID,
		arg.GangID,
		arg.VideoID,
		arg.GuessedUserID,
	)
	var i VideoGuess
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GangID,
		&i.VideoID,
		&i.GuessedUserID,
		&i.GuessedAt,
	)
	return i, err
}

const createVideoIfNotExists = `-- name: CreateVideoIfNotExists :exec
INSERT INTO videos (
    video_id, title, description, thumbnail_url, channel_name
) VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT (video_id) DO NOTHING
`

type CreateVideoIfNotExistsParams struct {
	VideoID      string
	Title        string
	Description  string
	ThumbnailUrl string
	ChannelName  string
}

func (q *Queries) CreateVideoIfNotExists(ctx context.Context, arg CreateVideoIfNotExistsParams) error {
	_, err := q.db.Exec(ctx, createVideoIfNotExists,
		arg.VideoID,
		arg.Title,
		arg.Description,
		arg.ThumbnailUrl,
		arg.ChannelName,
	)
	return err
}

const createVideoSubmission = `-- name: CreateVideoSubmission :one
INSERT INTO video_submissions (
    user_id, gang_id, video_id
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, gang_id, video_id, created_at
`

type CreateVideoSubmissionParams struct {
	UserID  int32
	GangID  int32
	VideoID string
}

func (q *Queries) CreateVideoSubmission(ctx context.Context, arg CreateVideoSubmissionParams) (VideoSubmission, error) {
	row := q.db.QueryRow(ctx, createVideoSubmission, arg.UserID, arg.GangID, arg.VideoID)
	var i VideoSubmission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GangID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGuessesForGang = `-- name: DeleteGuessesForGang :exec
DELETE FROM video_guesses
WHERE gang_id = $1
`

func (q *Queries) DeleteGuessesForGang(ctx context.Context, gangID int32) error {
	_, err := q.db.Exec(ctx, deleteGuessesForGang, gangID)
	return err
}

const deleteVideoSubmission = `-- name: DeleteVideoSubmission :exec
DELETE FROM video_submissions
WHERE user_id = $1
AND gang_id = $2
AND video_id = $3
`

type DeleteVideoSubmissionParams struct {
	UserID  int32
	GangID  int32
	VideoID string
}

func (q *Queries) DeleteVideoSubmission(ctx context.Context, arg DeleteVideoSubmissionParams) error {
	_, err := q.db.Exec(ctx, deleteVideoSubmission, arg.UserID, arg.GangID, arg.VideoID)
	return err
}

const getAllGuessesForGang = `-- name: GetAllGuessesForGang :many
SELECT vg.id, vg.user_id, vg.gang_id, vg.video_id, vg.guessed_user_id, vg.guessed_at, 
       u1.name AS guesser_name, u1.avatar_path AS guesser_avatar,
       u2.name AS guessed_name, u2.avatar_path AS guessed_avatar
FROM video_guesses vg
JOIN users u1 ON vg.user_id = u1.id
JOIN users u2 ON vg.guessed_user_id = u2.id
WHERE vg.gang_id = $1
ORDER BY vg.video_id, vg.guessed_at
`

type GetAllGuessesForGangRow struct {
	ID            int32
	UserID        int32
	GangID        int32
	VideoID       string
	GuessedUserID int32
	GuessedAt     pgtype.Timestamptz
	GuesserName   string
	GuesserAvatar pgtype.Text
	GuessedName   string
	GuessedAvatar pgtype.Text
}

func (q *Queries) GetAllGuessesForGang(ctx context.Context, gangID int32) ([]GetAllGuessesForGangRow, error) {
	rows, err := q.db.Query(ctx, getAllGuessesForGang, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGuessesForGangRow
	for rows.Next() {
		var i GetAllGuessesForGangRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GangID,
			&i.VideoID,
			&i.GuessedUserID,
			&i.GuessedAt,
			&i.GuesserName,
			&i.GuesserAvatar,
			&i.GuessedName,
			&i.GuessedAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGuessesForVideo = `-- name: GetAllGuessesForVideo :many
SELECT vg.id, vg.user_id, vg.gang_id, vg.video_id, vg.guessed_user_id, vg.guessed_at, 
       u1.name AS guesser_name, u1.avatar_path AS guesser_avatar,
       u2.name AS guessed_name, u2.avatar_path AS guessed_avatar
FROM video_guesses vg
JOIN users u1 ON vg.user_id = u1.id
JOIN users u2 ON vg.guessed_user_id = u2.id
WHERE vg.gang_id = $1 AND vg.video_id = $2
ORDER BY vg.guessed_at
`

type GetAllGuessesForVideoParams struct {
	GangID  int32
	VideoID string
}

type GetAllGuessesForVideoRow struct {
	ID            int32
	UserID        int32
	GangID        int32
	VideoID       string
	GuessedUserID int32
	GuessedAt     pgtype.Timestamptz
	GuesserName   string
	GuesserAvatar pgtype.Text
	GuessedName   string
	GuessedAvatar pgtype.Text
}

func (q *Queries) GetAllGuessesForVideo(ctx context.Context, arg GetAllGuessesForVideoParams) ([]GetAllGuessesForVideoRow, error) {
	rows, err := q.db.Query(ctx, getAllGuessesForVideo, arg.GangID, arg.VideoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGuessesForVideoRow
	for rows.Next() {
		var i GetAllGuessesForVideoRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GangID,
			&i.VideoID,
			&i.GuessedUserID,
			&i.GuessedAt,
			&i.GuesserName,
			&i.GuesserAvatar,
			&i.GuessedName,
			&i.GuessedAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersInGang = `-- name: GetAllUsersInGang :many
SELECT u.id, u.name, u.avatar_path, u.created_at, u.last_login FROM users u
JOIN users_gangs ug ON u.id = ug.user_id
WHERE ug.gang_id = $1
ORDER BY u.name
`

func (q *Queries) GetAllUsersInGang(ctx context.Context, gangID int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersInGang, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVideosInGang = `-- name: GetAllVideosInGang :many
SELECT v.video_id, v.title, v.description, v.thumbnail_url, v.channel_name
FROM video_submissions vs
JOIN videos v ON vs.video_id = v.video_id
WHERE vs.gang_id = $1
ORDER BY vs.created_at DESC
`

func (q *Queries) GetAllVideosInGang(ctx context.Context, gangID int32) ([]Video, error) {
	rows, err := q.db.Query(ctx, getAllVideosInGang, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.Description,
			&i.ThumbnailUrl,
			&i.ChannelName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGangById = `-- name: GetGangById :one
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE id = $1
`

func (q *Queries) GetGangById(ctx context.Context, id int32) (Gang, error) {
	row := q.db.QueryRow(ctx, getGangById, id)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getGangByName = `-- name: GetGangByName :one
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE name = $1
`

func (q *Queries) GetGangByName(ctx context.Context, name string) (Gang, error) {
	row := q.db.QueryRow(ctx, getGangByName, name)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getGangs = `-- name: GetGangs :many
SELECT id, name, entry_password_hash, created_at FROM gangs
ORDER BY name
`

func (q *Queries) GetGangs(ctx context.Context) ([]Gang, error) {
	rows, err := q.db.Query(ctx, getGangs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gang
	for rows.Next() {
		var i Gang
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EntryPasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, avatar_path, created_at, last_login FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarPath,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, avatar_path, created_at, last_login FROM users
ORDER BY name
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByNameAndGangId = `-- name: GetUsersByNameAndGangId :many
SELECT u.id, u.name, u.avatar_path, u.created_at, u.last_login FROM users u
JOIN users_gangs ug ON u.id = ug.user_id
WHERE u.name ILIKE $1
AND ug.gang_id = $2
`

type GetUsersByNameAndGangIdParams struct {
	Name   string
	GangID int32
}

func (q *Queries) GetUsersByNameAndGangId(ctx context.Context, arg GetUsersByNameAndGangIdParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByNameAndGangId, arg.Name, arg.GangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersInGang = `-- name: GetUsersInGang :many
SELECT u.id, u.name, u.avatar_path, u.created_at, u.last_login FROM users u
JOIN users_gangs ug ON u.id = ug.user_id
WHERE ug.gang_id = $1
ORDER BY u.name
`

func (q *Queries) GetUsersInGang(ctx context.Context, gangID int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersInGang, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoByVideoId = `-- name: GetVideoByVideoId :one
SELECT video_id, title, description, thumbnail_url, channel_name FROM videos
WHERE video_id = $1
`

func (q *Queries) GetVideoByVideoId(ctx context.Context, videoID string) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoByVideoId, videoID)
	var i Video
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Description,
		&i.ThumbnailUrl,
		&i.ChannelName,
	)
	return i, err
}

const getVideoGuessForUser = `-- name: GetVideoGuessForUser :one
SELECT id, user_id, gang_id, video_id, guessed_user_id, guessed_at FROM video_guesses
WHERE user_id = $1 AND gang_id = $2 AND video_id = $3
`

type GetVideoGuessForUserParams struct {
	UserID  int32
	GangID  int32
	VideoID string
}

func (q *Queries) GetVideoGuessForUser(ctx context.Context, arg GetVideoGuessForUserParams) (VideoGuess, error) {
	row := q.db.QueryRow(ctx, getVideoGuessForUser, arg.UserID, arg.GangID, arg.VideoID)
	var i VideoGuess
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GangID,
		&i.VideoID,
		&i.GuessedUserID,
		&i.GuessedAt,
	)
	return i, err
}

const getVideoSubmitter = `-- name: GetVideoSubmitter :one
SELECT u.id, u.name, u.avatar_path
FROM video_submissions vs
JOIN users u ON vs.user_id = u.id
WHERE vs.gang_id = $1 AND vs.video_id = $2
`

type GetVideoSubmitterParams struct {
	GangID  int32
	VideoID string
}

type GetVideoSubmitterRow struct {
	ID         int32
	Name       string
	AvatarPath pgtype.Text
}

// Query to find the submitter of a video
func (q *Queries) GetVideoSubmitter(ctx context.Context, arg GetVideoSubmitterParams) (GetVideoSubmitterRow, error) {
	row := q.db.QueryRow(ctx, getVideoSubmitter, arg.GangID, arg.VideoID)
	var i GetVideoSubmitterRow
	err := row.Scan(&i.ID, &i.Name, &i.AvatarPath)
	return i, err
}

const getVideosSubmittedByGangIdAndUserId = `-- name: GetVideosSubmittedByGangIdAndUserId :many
SELECT vs.id, vs.user_id, vs.gang_id, vs.video_id, vs.created_at, v.title, v.description, v.thumbnail_url, v.channel_name
FROM video_submissions vs
JOIN videos v ON vs.video_id = v.video_id
WHERE vs.gang_id = $1
AND vs.user_id = $2
ORDER BY vs.created_at DESC
`

type GetVideosSubmittedByGangIdAndUserIdParams struct {
	GangID int32
	UserID int32
}

type GetVideosSubmittedByGangIdAndUserIdRow struct {
	ID           int32
	UserID       int32
	GangID       int32
	VideoID      string
	CreatedAt    pgtype.Timestamptz
	Title        string
	Description  string
	ThumbnailUrl string
	ChannelName  string
}

func (q *Queries) GetVideosSubmittedByGangIdAndUserId(ctx context.Context, arg GetVideosSubmittedByGangIdAndUserIdParams) ([]GetVideosSubmittedByGangIdAndUserIdRow, error) {
	rows, err := q.db.Query(ctx, getVideosSubmittedByGangIdAndUserId, arg.GangID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosSubmittedByGangIdAndUserIdRow
	for rows.Next() {
		var i GetVideosSubmittedByGangIdAndUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GangID,
			&i.VideoID,
			&i.CreatedAt,
			&i.Title,
			&i.Description,
			&i.ThumbnailUrl,
			&i.ChannelName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserHostOfGang = `-- name: IsUserHostOfGang :one
SELECT isHost FROM users_gangs
WHERE user_id = $1
AND gang_id = $2
`

type IsUserHostOfGangParams struct {
	UserID int32
	GangID int32
}

func (q *Queries) IsUserHostOfGang(ctx context.Context, arg IsUserHostOfGangParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserHostOfGang, arg.UserID, arg.GangID)
	var ishost bool
	err := row.Scan(&ishost)
	return ishost, err
}

const searchGangs = `-- name: SearchGangs :many
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT 10
`

func (q *Queries) SearchGangs(ctx context.Context, dollar_1 pgtype.Text) ([]Gang, error) {
	rows, err := q.db.Query(ctx, searchGangs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gang
	for rows.Next() {
		var i Gang
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EntryPasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
SET avatar_path = $2
WHERE id = $1
`

type UpdateUserAvatarParams struct {
	ID         int32
	AvatarPath pgtype.Text
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.ID, arg.AvatarPath)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}
