// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const associateUserWithGang = `-- name: AssociateUserWithGang :exec
INSERT INTO users_gangs (
    user_id, gang_id, isHost
) VALUES (
    $1, $2, $3
)
`

type AssociateUserWithGangParams struct {
	UserID int32
	GangID int32
	Ishost pgtype.Bool
}

func (q *Queries) AssociateUserWithGang(ctx context.Context, arg AssociateUserWithGangParams) error {
	_, err := q.db.Exec(ctx, associateUserWithGang, arg.UserID, arg.GangID, arg.Ishost)
	return err
}

const createGang = `-- name: CreateGang :one
INSERT INTO gangs (
    name, entry_password_hash
) VALUES (
    $1, $2
)
RETURNING id, name, entry_password_hash, created_at
`

type CreateGangParams struct {
	Name              string
	EntryPasswordHash string
}

func (q *Queries) CreateGang(ctx context.Context, arg CreateGangParams) (Gang, error) {
	row := q.db.QueryRow(ctx, createGang, arg.Name, arg.EntryPasswordHash)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, avatar_path
) VALUES (
    $1, $2
)
RETURNING id, name, avatar_path, created_at, last_login
`

type CreateUserParams struct {
	Name       string
	AvatarPath pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.AvatarPath)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarPath,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (
    video_id, title, description, thumbnail_url, channel_name
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING video_id, title, description, thumbnail_url, channel_name
`

type CreateVideoParams struct {
	VideoID      string
	Title        string
	Description  pgtype.Text
	ThumbnailUrl pgtype.Text
	ChannelName  string
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, createVideo,
		arg.VideoID,
		arg.Title,
		arg.Description,
		arg.ThumbnailUrl,
		arg.ChannelName,
	)
	var i Video
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Description,
		&i.ThumbnailUrl,
		&i.ChannelName,
	)
	return i, err
}

const createVideoSubmission = `-- name: CreateVideoSubmission :one
INSERT INTO video_submissions (
    user_id, gang_id, video_id
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, gang_id, video_id, created_at
`

type CreateVideoSubmissionParams struct {
	UserID  int32
	GangID  int32
	VideoID string
}

func (q *Queries) CreateVideoSubmission(ctx context.Context, arg CreateVideoSubmissionParams) (VideoSubmission, error) {
	row := q.db.QueryRow(ctx, createVideoSubmission, arg.UserID, arg.GangID, arg.VideoID)
	var i VideoSubmission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GangID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const getGangById = `-- name: GetGangById :one
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE id = $1
`

func (q *Queries) GetGangById(ctx context.Context, id int32) (Gang, error) {
	row := q.db.QueryRow(ctx, getGangById, id)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getGangByName = `-- name: GetGangByName :one
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE name = $1
`

func (q *Queries) GetGangByName(ctx context.Context, name string) (Gang, error) {
	row := q.db.QueryRow(ctx, getGangByName, name)
	var i Gang
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntryPasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getGangs = `-- name: GetGangs :many
SELECT id, name, entry_password_hash, created_at FROM gangs
ORDER BY name
`

func (q *Queries) GetGangs(ctx context.Context) ([]Gang, error) {
	rows, err := q.db.Query(ctx, getGangs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gang
	for rows.Next() {
		var i Gang
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EntryPasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, avatar_path, created_at, last_login FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarPath,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, avatar_path, created_at, last_login FROM users
ORDER BY name
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersInGang = `-- name: GetUsersInGang :many
SELECT u.id, u.name, u.avatar_path, u.created_at, u.last_login FROM users u
JOIN users_gangs ug ON u.id = ug.user_id
WHERE ug.gang_id = $1
ORDER BY u.name
`

func (q *Queries) GetUsersInGang(ctx context.Context, gangID int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersInGang, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarPath,
			&i.CreatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoByVideoId = `-- name: GetVideoByVideoId :one
SELECT video_id, title, description, thumbnail_url, channel_name FROM videos
WHERE video_id = $1
`

func (q *Queries) GetVideoByVideoId(ctx context.Context, videoID string) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoByVideoId, videoID)
	var i Video
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Description,
		&i.ThumbnailUrl,
		&i.ChannelName,
	)
	return i, err
}

const getVideosSubmittedByGangId = `-- name: GetVideosSubmittedByGangId :many
SELECT vs.id, vs.user_id, vs.gang_id, vs.video_id, vs.created_at, v.title, v.description, v.thumbnail_url, v.channel_name
FROM video_submissions vs
JOIN videos v ON vs.video_id = v.video_id
WHERE vs.gang_id = $1
ORDER BY vs.created_at DESC
`

type GetVideosSubmittedByGangIdRow struct {
	ID           int32
	UserID       int32
	GangID       int32
	VideoID      string
	CreatedAt    pgtype.Timestamptz
	Title        string
	Description  pgtype.Text
	ThumbnailUrl pgtype.Text
	ChannelName  string
}

func (q *Queries) GetVideosSubmittedByGangId(ctx context.Context, gangID int32) ([]GetVideosSubmittedByGangIdRow, error) {
	rows, err := q.db.Query(ctx, getVideosSubmittedByGangId, gangID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosSubmittedByGangIdRow
	for rows.Next() {
		var i GetVideosSubmittedByGangIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GangID,
			&i.VideoID,
			&i.CreatedAt,
			&i.Title,
			&i.Description,
			&i.ThumbnailUrl,
			&i.ChannelName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchGangs = `-- name: SearchGangs :many
SELECT id, name, entry_password_hash, created_at FROM gangs
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT 10
`

func (q *Queries) SearchGangs(ctx context.Context, dollar_1 pgtype.Text) ([]Gang, error) {
	rows, err := q.db.Query(ctx, searchGangs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gang
	for rows.Next() {
		var i Gang
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EntryPasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
