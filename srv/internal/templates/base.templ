package templates

import (
	"fmt"
	"github.com/tristanbatchler/youtube_night/srv/internal/db"
	"github.com/tristanbatchler/youtube_night/srv/internal/stores"
	"github.com/tristanbatchler/youtube_night/srv/internal/util"
	"time"
)

templ header(title string) {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta
			name="htmx-config"
			content='{
				"responseHandling":[
					{"code":"204", "swap": true},
					{"code":"[23]..", "swap": true},
					{"code":"422", "swap": true},
					{"code":"401", "swap": true},
					{"code":"[45]..", "swap": false, "error": true},
					{"code":"...", "swap": true}
				]
			}'
		/>
		<link href="./static/css/style.css" rel="stylesheet"/>
		<link rel="manifest" href="./static/images/favicons/site.webmanifest"/>
		<link rel="icon" href="./static/images/favicons/favicon.ico" type="image/x-icon"/>
		<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20,100,1,200&icon_names=cast,contrast,dark_mode,delete,light_mode" rel="stylesheet"/>
		<title>{ title }</title>
		<script>
            window.loadTheme = function() {
				document.documentElement.classList.toggle(
					"dark",
					localStorage.theme === "dark" ||
						(!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches),
				);
			}
			window.loadTheme();

			window.setTheme = function(theme) {
				if (theme === "light") {
					localStorage.theme = "light";
				} else if (theme === "dark") {
					localStorage.theme = "dark";
				} else {
					localStorage.removeItem("theme");
				}
				window.loadTheme();
			}
        </script>
		<script src="https://unpkg.com/htmx.org@2.0.4"></script>
		<script src="https://unpkg.com/hyperscript.org@0.9.14"></script>
		<script src="https://unpkg.com/htmx-ext-response-targets@2.0.2"></script>
	</head>
}

templ themeToggle() {
	<div class="fixed top-4 right-4 bg-gray-100 dark:bg-gray-700 rounded-lg shadow p-2">
		<div class="flex space-x-2">
			<button
				onclick="window.setTheme('light')"
				class="btn-secondary"
				title="Light Mode"
			>
				<span class="material-symbols-outlined w-12 h-12 text-yellow-500 size-40">light_mode</span>
			</button>
			<button
				onclick="window.setTheme('system')"
				class="btn-secondary"
				title="System Preference"
			>
				<span class="material-symbols-outlined w-12 h-12 text-gray-500 size-40">contrast</span>
			</button>
			<button
				onclick="window.setTheme('dark')"
				class="btn-secondary"
				title="Dark Mode"
			>
				<span class="material-symbols-outlined w-12 h-12 text-indigo-500 size-40">dark_mode</span>
			</button>
		</div>
	</div>
}

templ footer() {
	<footer class="py-4">
		<div class="container mx-auto px-4">
			<div class="flex justify-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
				{{ year := time.Now().Year() }}
				<span class="space-x-4">&copy; { year } YouTube Night</span>
				<a href="/terms" class="hover:underline space-x-4">Terms of Service</a>
				<a href="/privacy" class="hover:underline space-x-4">Privacy Policy</a>
			</div>
		</div>
	</footer>
}

templ Layout(contents templ.Component, title string) {
	<!DOCTYPE html>
	<html lang="en">
		@header(title)
		<body class="bg-gray-50 dark:bg-gray-900 min-h-screen font-sans text-gray-800 dark:text-gray-100" hx-ext="response-targets">
			@themeToggle()
			<main class="flex flex-col items-center justify-center min-h-screen">
				@contents
				@footer()
			</main>
		</body>
	</html>
}

templ MainContent(contents templ.Component) {
	<div id="main-content" class="container mx-auto px-4 py-8">
		@contents
	</div>
}

templ ValidationErrors(errors []string) {
	<div id="validation-errors">
		<ul class="text-red-600 dark:text-red-400">
			for _, err := range errors {
				<li>{ err }</li>
			}
		</ul>
	</div>
}

templ searchIndicator() {
	<div id="search-indicator" class="htmx-indicator flex justify-center">
		<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
			<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		</svg>
		<span>Searching...</span>
	</div>
}

script websocketConnect(gangId int32, userId int32) {
  // Create WebSocket connection
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/ws`;
  
  console.log("Connecting to WebSocket at", wsUrl);
  
  const socket = new WebSocket(wsUrl);
  
  socket.onopen = function(e) {
    console.log("WebSocket connection established");
  };
  
  socket.onmessage = function(event) {
    const message = event.data;
    console.log("WebSocket message received:", message);

    if (message === "game_start") {
        console.log("Game has started! Moving to game page...");
        window.location.href = "/game";
    } else if (message === "game_stop") {
        console.log("Game has stopped! Moving to dashboard...");
        window.location.href = "/dashboard";
    } else {
        // Try to parse as JSON for more complex messages
        try {
            const jsonMessage = JSON.parse(message);
            
            if (jsonMessage.type === "video_change") {
                console.log("Video change message received:", jsonMessage);
                updateVideoPlayer(jsonMessage);
            } 
            else if (jsonMessage.type === "current_video") {
                console.log("Current video info received for latecomer:", jsonMessage);
                
                // Similar to video_change but includes a timestamp and pause state
                updateVideoPlayer(jsonMessage, jsonMessage.timestamp);
                
                // Also apply pause state if needed
                if (jsonMessage.isPaused) {
                    setTimeout(() => {
                        pauseVideo(jsonMessage.timestamp);
						console.log("Current video is paused at timestamp:", jsonMessage.timestamp);
                    }, 4000); // TODO: This is a hack to wait for the player to load
                }
            }
            else if (jsonMessage.type === "playback_state") {
                console.log("Playback state change received:", jsonMessage);
                handlePlaybackStateChange(jsonMessage);
            }
        } catch (e) {
            console.log("Not a JSON message or error parsing:", e);
        }
    }
  };
  
  // Handle playback state changes from host
  function handlePlaybackStateChange(data) {
    const player = document.querySelector("#yt-player");
    if (!player) return;
    
    const isHost = Boolean(document.getElementById('host-controls'));
    if (isHost) return; // Host doesn't need to follow their own commands
    
    if (data.isPaused) {
        // Mark the player as host-paused to prevent manual resume
        player.dataset.hostPaused = 'true';
        
        // Pause at the specified timestamp
        pauseVideo(data.timestamp);
    } else {
        // Host is resuming playback
        player.dataset.hostPaused = 'false';
        
        // Seek to where the host is and play
        if (player.paused) {
            try {
                const mediaEl = player.querySelector('media-provider');
                if (mediaEl && mediaEl.media) {
                    mediaEl.media.currentTime = data.timestamp;
                    mediaEl.media.play().catch(err => {
                        console.warn("Could not autoplay video:", err);
                    });
                } else {
                    // Fallback
                    player.currentTime = data.timestamp;
                    player.play().catch(err => {
                        console.warn("Could not autoplay video:", err);
                    });
                }
            } catch (err) {
                console.warn("Error resuming video:", err);
            }
        }
    }
  }
  
  // Pause video at specific timestamp
  function pauseVideo(timestamp) {
    const player = document.querySelector("#yt-player");
    if (!player) return;
    
    try {
        // Set the timestamp first
        const mediaEl = player.querySelector('media-provider');
        if (mediaEl && mediaEl.media) {
            mediaEl.media.currentTime = timestamp;
            mediaEl.media.pause();
        } else {
            // Fallback
            player.currentTime = timestamp;
            player.pause();
        }
    } catch (err) {
        console.warn("Error pausing video:", err);
    }
  }
  
  // Helper function to update the video player
  function updateVideoPlayer(videoData, startTime) {
    const player = document.querySelector("#yt-player");
    if (player) {
        // Update the video source
        const videoSrc = "youtube/" + videoData.videoId;
        
        // Only change if it's a different video
        if (player.src !== videoSrc) {
            player.src = videoSrc;
        }
        
        // If there's a specific timestamp to start from
        if (startTime && startTime > 0) {
            // Wait for the player to load then seek to the timestamp
            setTimeout(() => {
                // Try to seek to the specified time
                try {
                    const mediaEl = player.querySelector('media-provider');
                    if (mediaEl && mediaEl.media) {
                        mediaEl.media.currentTime = startTime;
                        mediaEl.media.play().catch(err => {
                            console.warn("Could not autoplay video:", err);
                        });
                    } else {
                        // Fallback
                        player.currentTime = startTime;
                        player.play().catch(err => {
                            console.warn("Could not autoplay video:", err);
                        });
                    }
                } catch (err) {
                    console.warn("Failed to seek to timestamp:", err);
                }
            }, 1000);
        }
        
        // Update UI elements
        const titleElement = document.querySelector("#current-video-title");
        const channelElement = document.querySelector("#current-video-channel");
        const indexElement = document.querySelector("#current-video-index");
        
        if (titleElement) titleElement.textContent = videoData.title;
        if (channelElement) channelElement.textContent = videoData.channel;
        if (indexElement) indexElement.textContent = (videoData.index + 1).toString();
    }
  }
  
  socket.onclose = function(event) {
    if (event.wasClean) {
      console.log(`WebSocket connection closed cleanly, code=${event.code}, reason=${event.reason}`);
    } else {
      console.log('WebSocket connection died');
	  alert("Connection to the game was lost.");
	  window.location.href = "/dashboard";
    }
  };
  
  socket.onerror = function(error) {
    console.error(`WebSocket error: ${error.message}`);
  };
}

templ videoCountBadge(count int) {
	<span id="videos-count-badge" class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300">
		if count == 1 {
			1 video
		} else {
			{ count } videos
		}
	</span>
}

templ noVideosMessage() {
	<div id="no-videos-message" class="text-gray-600 dark:text-gray-400">
		<p>You haven't suggested any videos yet. Use the search box to find and suggest videos!</p>
	</div>
}

templ videosList(videos []db.Video, allowDelete bool, allowCast bool) {
	<div id="videos-container">
		<ul id="videos-list" class="grid grid-cols-1 md:grid-cols-2 gap-4">
			for _, video := range videos {
				@videoCard(video, allowDelete, allowCast)
			}
		</ul>
		if len(videos) <= 0 {
			@noVideosMessage()
		}
	</div>
}

templ videoCard(video db.Video, allowDelete bool, allowCast bool) {
	<div
		class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 relative group"
		id={ fmt.Sprintf("video-%s", video.VideoID) }
	>
		<a href={ templ.SafeURL(fmt.Sprintf("https://www.youtube.com/watch?v=%s", video.VideoID)) } target="_blank" rel="noopener noreferrer" class="block">
			<div class="relative">
				if video.ThumbnailUrl != "" {
					<div class="aspect-video w-full relative">
						<img
							src={ video.ThumbnailUrl }
							alt="Video Thumbnail"
							class="w-full h-full object-cover"
						/>
					</div>
				}
			</div>
			<div class="p-4">
				<h3 class="font-semibold text-gray-900 dark:text-white line-clamp-1">{ video.Title }</h3>
				<p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-1">
					{ video.ChannelName }
				</p>
				<p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">
					{ video.Description }
				</p>
			</div>
		</a>
		// Action buttons
		if allowDelete || allowCast {
			<div class="absolute top-2 right-2 flex space-x-2">
				if allowDelete {
					<button
						hx-post={ fmt.Sprintf("/videos/remove?videoId=%s", video.VideoID) }
						hx-target={ fmt.Sprintf("#video-%s", video.VideoID) }
						hx-swap="outerHTML"
						class="btn-secondary"
						title="Delete Video"
						aria-label="Delete Video"
					>
						<span class="material-symbols-outlined text-red-600">delete</span>
					</button>
				}
				if allowCast {
					<button
						hx-post={ fmt.Sprintf("/videos/cast?videoId=%s", video.VideoID) }
						class="btn-secondary"
						title="Cast Video"
						aria-label="Cast Video"
					>
						<span class="material-symbols-outlined text-blue-600">cast</span>
					</button>
				}
			</div>
		}
	</div>
}

templ dashboardHeader(sessionData *stores.SessionData) {
	@websocketConnect(sessionData.GangId, sessionData.UserId)
	<link rel="stylesheet" href="https://cdn.vidstack.io/player/theme.css"/>
	<link rel="stylesheet" href="https://cdn.vidstack.io/player/video.css"/>
	<script src="https://cdn.vidstack.io/player" type="module"></script>
	<header class="flex flex-col sm:flex-row justify-between items-start sm:items-center py-6 mb-6 border-b border-gray-200 dark:border-gray-700">
		<h1 class="text-3xl font-bold tracking-tight">
			<span class="text-red-900 dark:text-red-300">YouTube</span>
			<span class="text-indigo-900 dark:text-indigo-300">Night</span>
		</h1>
		<div class="mt-4 sm:mt-0 flex items-center bg-white dark:bg-gray-800 px-4 py-2 rounded-full shadow-sm">
			<div class="text-2xl mr-2">{ util.AvatarTextToEmoji(sessionData.Avatar) }</div>
			<span class="font-medium text-gray-700 dark:text-gray-300 mr-2">{ sessionData.Name }</span>
			// Online indicator (purely aesthetic)
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
				Online
			</span>
			// Logout button
			<a
				hx-post="/logout"
				hx-target="#main-content"
				hx-swap="outerHTML"
				class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100 hover:bg-red-200 dark:hover:bg-red-700 transition-colors ml-4 cursor-pointer"
				title="Logout"
				aria-label="Logout"
			>
				Leave gang
			</a>
		</div>
	</header>
}
